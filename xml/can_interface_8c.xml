<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="can_interface_8c" kind="file" language="C++">
    <compoundname>canInterface.c</compoundname>
    <includes refid="can_interface_8h" local="yes">canInterface.h</includes>
    <includes refid="revision_info_8h" local="yes">revisionInfo.h</includes>
    <includes refid="_i_qmath_lib_8h" local="yes">IQmathLib.h</includes>
    <includes local="yes">dsp.h</includes>
    <includes refid="application_8h" local="yes">application.h</includes>
    <includes refid="interface_8h" local="yes">interface.h</includes>
    <includes local="yes">canInterfaceGen.h</includes>
    <includes local="yes">gridConnectionStatus.h</includes>
    <includes local="yes">system.h</includes>
    <includes local="yes">scheduler.h</includes>
    <includes local="yes">faultHandler.h</includes>
    <includes local="yes">dataLogger.h</includes>
    <includes local="yes">eepromHandler.h</includes>
    <includes local="yes">modbusHandler.h</includes>
    <includes local="yes">sunspecInterfaceGen.h</includes>
    <includes local="yes">canHandler.h</includes>
    <includes local="yes">authorization.h</includes>
    <includes local="yes">deviceThermalModel.h</includes>
    <includes local="yes">protectionsI.h</includes>
    <includes local="yes">supervisor.h</includes>
    <includes local="yes">gridMonitor.h</includes>
    <includes local="yes">IEEE1547.h</includes>
    <includes local="yes">fanControl.h</includes>
    <includes local="yes">topLevelControl.h</includes>
    <includes local="yes">powerConversionControl.h</includes>
    <includes local="yes">phaseConfigDetectI.h</includes>
    <includes local="yes">islandControlI.h</includes>
    <includes local="yes">phaseCurrentControlI.h</includes>
    <includes local="yes">adaptiveHarmonicControlI.h</includes>
    <includes local="yes">phasePllI.h</includes>
    <includes local="yes">auxiliaryPllI.h</includes>
    <includes local="yes">protectedBusControlI.h</includes>
    <includes local="yes">phaseControlI.h</includes>
    <includes local="yes">filterObserverI.h</includes>
    <includes local="yes">afe.h</includes>
    <includes local="yes">dcdcControl.h</includes>
    <includes local="yes">referenceHandler.h</includes>
    <includes local="yes">epc2P2Z.h</includes>
    <includes local="yes">modulatorI.h</includes>
    <includes local="yes">simulateFeedbackI.h</includes>
    <includes local="yes">channelMappingManagerI.h</includes>
    <includes local="yes">utils.h</includes>
    <includes local="yes">measurementd.h</includes>
    <includes local="yes">pwmd.h</includes>
    <includes local="yes">digitalIO.h</includes>
    <includes local="yes">ccp.h</includes>
    <includes local="yes">humiditySensor.h</includes>
    <includes local="yes">MTH_constants.h</includes>
    <includes local="yes">MTH_scale.h</includes>
    <includes local="yes">ABB_libPrimaryControl.h</includes>
    <includes local="yes">sunspec.h</includes>
    <incdepgraph>
      <node id="60">
        <label>ABB_libPrimaryControl.h</label>
      </node>
      <node id="17">
        <label>application.h</label>
        <link refid="application_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c</label>
        <link refid="can_interface_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>canInterface.h</label>
        <link refid="can_interface_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>interface.h</label>
        <link refid="interface_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>revisionInfo.h</label>
        <link refid="revision_info_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>IQmathLib.h</label>
        <link refid="_i_qmath_lib_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>IEEE1547.h</label>
      </node>
      <node id="58">
        <label>MTH_constants.h</label>
      </node>
      <node id="59">
        <label>MTH_scale.h</label>
      </node>
      <node id="40">
        <label>adaptiveHarmonicControlI.h</label>
      </node>
      <node id="46">
        <label>afe.h</label>
      </node>
      <node id="10">
        <label>authorization.h</label>
      </node>
      <node id="42">
        <label>auxiliaryPllI.h</label>
      </node>
      <node id="29">
        <label>canHandler.h</label>
      </node>
      <node id="6">
        <label>canInterfaceEnums.h</label>
      </node>
      <node id="22">
        <label>canInterfaceGen.h</label>
      </node>
      <node id="3">
        <label>cand.h</label>
      </node>
      <node id="56">
        <label>ccp.h</label>
      </node>
      <node id="52">
        <label>channelMappingManagerI.h</label>
      </node>
      <node id="20">
        <label>dataLogger.h</label>
      </node>
      <node id="47">
        <label>dcdcControl.h</label>
      </node>
      <node id="30">
        <label>deviceThermalModel.h</label>
      </node>
      <node id="21">
        <label>digitalIO.h</label>
      </node>
      <node id="16">
        <label>dsp.h</label>
      </node>
      <node id="26">
        <label>eepromHandler.h</label>
      </node>
      <node id="49">
        <label>epc2P2Z.h</label>
      </node>
      <node id="34">
        <label>fanControl.h</label>
      </node>
      <node id="19">
        <label>faultHandler.h</label>
      </node>
      <node id="45">
        <label>filterObserverI.h</label>
      </node>
      <node id="23">
        <label>gridConnectionStatus.h</label>
      </node>
      <node id="33">
        <label>gridMonitor.h</label>
      </node>
      <node id="57">
        <label>humiditySensor.h</label>
      </node>
      <node id="18">
        <label>ioHandler.h</label>
      </node>
      <node id="38">
        <label>islandControlI.h</label>
      </node>
      <node id="15">
        <label>limits.h</label>
      </node>
      <node id="54">
        <label>measurementd.h</label>
      </node>
      <node id="8">
        <label>meta.h</label>
      </node>
      <node id="27">
        <label>modbusHandler.h</label>
      </node>
      <node id="50">
        <label>modulatorI.h</label>
      </node>
      <node id="37">
        <label>phaseConfigDetectI.h</label>
      </node>
      <node id="44">
        <label>phaseControlI.h</label>
      </node>
      <node id="39">
        <label>phaseCurrentControlI.h</label>
      </node>
      <node id="41">
        <label>phasePllI.h</label>
      </node>
      <node id="36">
        <label>powerConversionControl.h</label>
      </node>
      <node id="43">
        <label>protectedBusControlI.h</label>
      </node>
      <node id="31">
        <label>protectionsI.h</label>
      </node>
      <node id="55">
        <label>pwmd.h</label>
      </node>
      <node id="48">
        <label>referenceHandler.h</label>
      </node>
      <node id="25">
        <label>scheduler.h</label>
      </node>
      <node id="51">
        <label>simulateFeedbackI.h</label>
      </node>
      <node id="11">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="12">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>sunspec.h</label>
      </node>
      <node id="28">
        <label>sunspecInterfaceGen.h</label>
      </node>
      <node id="32">
        <label>supervisor.h</label>
      </node>
      <node id="24">
        <label>system.h</label>
      </node>
      <node id="35">
        <label>topLevelControl.h</label>
      </node>
      <node id="53">
        <label>utils.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" prot="public" static="no">
        <name>V_CMD_SCALE</name>
        <initializer>(10.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="82" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_interface_8c_1a6b57379d32d3533e60eef8f3e395663b" prot="public" static="no">
        <name>HZ_CMD_SCALE</name>
        <initializer>(100.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="83" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_interface_8c_1aa37274d148cf019caf08d558bddeb883" prot="public" static="no">
        <name>SC_STATUS_SCALE</name>
        <initializer>(10.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="84" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_interface_8c_1a30aff053a671a32c2f04e915cc7b00a2" prot="public" static="no">
        <name>VDC_SCALE</name>
        <initializer>(10.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="85" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_interface_8c_1af3331df6db97622344010ba1bf55ef42" prot="public" static="no">
        <name>CANIF_PROT_PHASE_INSTANT_TRIP</name>
        <param><defname>mGrp</defname></param>
        <initializer>void getProtPhaseInstantTrip_##mGrp(void) {     \
}                                               \
void setProtPhaseInstantTrip_##mGrp(void) {     \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="298" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_interface_8c_1ad35d743eb8bc1c1c4f077b4e62715dc4" prot="public" static="no">
        <name>CANIF_PROT_TIMED_OVERLOAD_TRIP</name>
        <param><defname>mName</defname></param>
        <initializer>void getProtTimedOverloadTrip_##mName(void) {   \
}                                               \
void setProtTimedOverloadTrip_##mName(void) {   \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="311" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_interface_8c_1ac144efd69d30eaf70f5217bf93ce7415" prot="public" static="no">
        <name>DATALOGGER_CHUNK_INDEX</name>
        <initializer>(ParameterQuery.Param0.Mux - ParameterQuery_LoggerChunk01)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="349" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" prot="public" static="no">
        <name>CANIF_MESD_CHANNEL_CALIBRATION</name>
        <param><defname>mChan</defname></param>
        <param><defname>mGget</defname></param>
        <param><defname>mGset</defname></param>
        <initializer>    void getMesdChannelCalibration_##mChan(void) {                                                                                              \
        ParameterQuery.MesdChannelCalibration_##mChan.Offset    = myround(MESD_ConfigI.offsetGain[MESD_CHANNEL_##mChan].offset    * 10.0e3f);   \
        ParameterQuery.MesdChannelCalibration_##mChan.Gain      = myround(MESD_ConfigI.offsetGain[MESD_CHANNEL_##mChan].gain      * mGget);     \
        ParameterQuery.MesdChannelCalibration_##mChan.OffsetTau = myround(MESD_ConfigI.offsetGain[MESD_CHANNEL_##mChan].tau       * 16.0f);     \
        ParameterQuery.MesdChannelCalibration_##mChan.CalPermit = MESD_ConfigI.offsetGain[MESD_CHANNEL_##mChan].offsetCalPermit;                \
    }                                                                                                                                           \
                                                                                                                                                \
    void setMesdChannelCalibration_##mChan(void) {                                                                                              \
        MESD_setConfigChannelCalibration(MESD_CHANNEL_##mChan,                                                                                  \
                                         (float)ParameterQuery.MesdChannelCalibration_##mChan.Offset    * 0.1e-3f,                              \
                                         (float)ParameterQuery.MesdChannelCalibration_##mChan.Gain      * mGset,                                \
                                         (float)ParameterQuery.MesdChannelCalibration_##mChan.OffsetTau * 0.0625f,                              \
                                         (MESD_CalibratePermit_t)ParameterQuery.MesdChannelCalibration_##mChan.CalPermit, false);               \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="394" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" prot="public" static="no">
        <name>CANIF_MESD_LUT_CALIBRATION</name>
        <param><defname>mEnu</defname></param>
        <param><defname>mNam</defname></param>
        <param><defname>mIdx</defname></param>
        <initializer>    void getMesdConfigLutCalibration_##mNam##_##mIdx(void) {                                                                                    \
        ParameterQuery.MesdConfigLutCalibration_##mNam##_##mIdx.u = myround(MESD_ConfigI.bptLookupTable[mEnu][mIdx - 1].x * 20.0e3);            \
        ParameterQuery.MesdConfigLutCalibration_##mNam##_##mIdx.y = myround(MESD_ConfigI.bptLookupTable[mEnu][mIdx - 1].y * 1.0e6);             \
    }                                                                                                                                           \
                                                                                                                                                \
    void setMesdConfigLutCalibration_##mNam##_##mIdx(void) {                                                                                    \
        MESD_ConfigI.bptLookupTable[mEnu][mIdx - 1].x  = (float)ParameterQuery.MesdConfigLutCalibration_##mNam##_##mIdx.u * 5.0e-5;             \
        MESD_ConfigI.bptLookupTable[mEnu][mIdx - 1].y  = (float)ParameterQuery.MesdConfigLutCalibration_##mNam##_##mIdx.y * 1.0e-6;             \
                                                                                                                                                \
        MESD_setConfigLutCalibration(mEnu);                                                                                                     \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="444" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" prot="public" static="no">
        <name>CANIF_PROT_TEMP_LIMIT_TRIP</name>
        <param><defname>mEnumT</defname></param>
        <param><defname>mEnumS</defname></param>
        <param><defname>mTemp</defname></param>
        <param><defname>mState</defname></param>
        <initializer>    void getProtTemperatureLimitTrip_##mTemp##_##mState(void) {                                                                                 \
        ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.limUpper =                                                                   \
            myround(PROT_ConfigI.tempTrips.stateNamed.mState.tempNamed.mTemp.boundNamed.upper * 100.0);                                         \
        ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.limLower =                                                                   \
            myround(PROT_ConfigI.tempTrips.stateNamed.mState.tempNamed.mTemp.boundNamed.lower * 100.0);                                         \
        ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.tripTime =                                                                   \
            myround(PROT_ConfigI.tempTrips.stateNamed.mState.tempNamed.mTemp.boundNamed.tTrip * 100.0);                                         \
    }                                                                                                                                           \
                                                                                                                                                \
    void setProtTemperatureLimitTrip_##mTemp##_##mState(void) {                                                                                 \
        PROT_setTemperatureLimitThresholds(mEnumT, mEnumS,                                                                                      \
                                           (float)ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.limUpper * 0.01,                   \
                                           (float)ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.limLower * 0.01,                   \
                                           (float)ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.tripTime * 0.01);                  \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="502" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_interface_8c_1a92f97880f19c821ca76067998268fae5" prot="public" static="no">
        <name>CANIF_PROT_VOLT_LIMIT_TRIP</name>
        <param><defname>mEnumV</defname></param>
        <param><defname>mVolt</defname></param>
        <initializer>    void getProtCtrlVoltageLimitTrip_##mVolt(void) {                                                                                            \
        ParameterQuery.ProtCtrlVoltageLimitTrip_##mVolt.limUpper = myround(PROT_ConfigI.ctrlTrips.voltNamed.mVolt.boundNamed.upper * 1000.0);   \
        ParameterQuery.ProtCtrlVoltageLimitTrip_##mVolt.limLower = myround(PROT_ConfigI.ctrlTrips.voltNamed.mVolt.boundNamed.lower * 1000.0);   \
    }                                                                                                                                           \
                                                                                                                                                \
  void setProtCtrlVoltageLimitTrip_##mVolt(void) {                                                                                              \
      PROT_setControlVoltageLimitThresholds(mEnumV,                                                                                             \
                                            (float)ParameterQuery.ProtCtrlVoltageLimitTrip_##mVolt.limUpper * 0.001f,                           \
                                            (float)ParameterQuery.ProtCtrlVoltageLimitTrip_##mVolt.limLower * 0.001f);                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="530" column="9" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="530" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="can_interface_8c_1a6703b98bcd8bf576d0b4ac9c5331dff2" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool lastResetDatalogger</definition>
        <argsstring></argsstring>
        <name>lastResetDatalogger</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="90" column="13" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="can_interface_8c_1a91ed870970da7a89447764ccf19160c9" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool lastTriggerDatalogger</definition>
        <argsstring></argsstring>
        <name>lastTriggerDatalogger</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="91" column="13" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="can_interface_8c_1a094b48a634cdb2ea9ebc5cb0185abe4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void canInterfaceUpdateTx_1ms</definition>
        <argsstring>(void)</argsstring>
        <name>canInterfaceUpdateTx_1ms</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="93" column="13" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="93" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a23d4fd4614e64a073ea10efd65f09205" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void canInterfaceUpdateTx_10ms</definition>
        <argsstring>(void)</argsstring>
        <name>canInterfaceUpdateTx_10ms</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>presently unused </para>
</xrefdescription></xrefsect></para>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="105" column="13" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="105" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1af154300e3bdcf36c87155d54f67a15aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void canInterfaceUpdateTx_100ms</definition>
        <argsstring>(void)</argsstring>
        <name>canInterfaceUpdateTx_100ms</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="200" column="13" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="200" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1aa05e7dbca4ce3c6efc8800cd471a26cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateProcessToInverter</definition>
        <argsstring>(bool valid)</argsstring>
        <name>updateProcessToInverter</name>
        <param>
          <type>bool</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="261" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="261" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a9199144a6fe802b4c16090de601b076b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getParam0</definition>
        <argsstring>(void)</argsstring>
        <name>getParam0</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="280" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="280" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1aee6dd93d939168638c22556f54a69461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPccConfigParams</definition>
        <argsstring>(void)</argsstring>
        <name>getPccConfigParams</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="283" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="283" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a4cb0b9db2e2d4e8b83e6f7737bba5424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPccConfigParams</definition>
        <argsstring>(void)</argsstring>
        <name>setPccConfigParams</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="285" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="285" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a468223789e27d85616228fb51b31216f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPrechargeTimes</definition>
        <argsstring>(void)</argsstring>
        <name>getPrechargeTimes</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="288" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="288" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1ab73ca43bc1778cb2e7ec352df6bc19de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPrechargeTimes</definition>
        <argsstring>(void)</argsstring>
        <name>setPrechargeTimes</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="290" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="290" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a4aeb685f3138ff377ca5b945befee597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPrechargeSecondary</definition>
        <argsstring>(void)</argsstring>
        <name>getPrechargeSecondary</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="293" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="293" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a166df2b7557c436751661104e263036a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPrechargeSecondary</definition>
        <argsstring>(void)</argsstring>
        <name>setPrechargeSecondary</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="295" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="295" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a2eea791cce9340f4feb9c7955dcc1506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getProtDcBusInstantTrip</definition>
        <argsstring>(void)</argsstring>
        <name>getProtDcBusInstantTrip</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="306" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="306" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a76eb3e3b40b81d75dc7edff6cb954eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setProtDcBusInstantTrip</definition>
        <argsstring>(void)</argsstring>
        <name>setProtDcBusInstantTrip</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="308" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="308" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a04390bfa764f4fe3c76286aea5ba97aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDataloggerConfig</definition>
        <argsstring>(void)</argsstring>
        <name>setDataloggerConfig</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="323" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="323" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1ad19f56c94e51d8b2a65040a7d7aa548b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getDataloggerConfig</definition>
        <argsstring>(void)</argsstring>
        <name>getDataloggerConfig</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="336" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="336" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a28bf5ea74276cf6c228f3391e11753c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getManageNV</definition>
        <argsstring>(void)</argsstring>
        <name>getManageNV</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="340" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="340" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1aff9e6d01761a25ca3b42366129ed47ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setManageNV</definition>
        <argsstring>(void)</argsstring>
        <name>setManageNV</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="344" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="344" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1aff4d8f19e8787acc8126c2628bc3d815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getLoggerConf01</definition>
        <argsstring>(void)</argsstring>
        <name>getLoggerConf01</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="351" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="351" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a8fadb47ed46d0e9efb149ad460fbd5f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setLoggerConf01</definition>
        <argsstring>(void)</argsstring>
        <name>setLoggerConf01</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="354" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1abe88e5ee2ecd92f9559467be700bcd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getRealPowerLimits</definition>
        <argsstring>(void)</argsstring>
        <name>getRealPowerLimits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="358" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="358" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a0d33a18bebc3f854bd6bcbe5482f1d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setRealPowerLimits</definition>
        <argsstring>(void)</argsstring>
        <name>setRealPowerLimits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="361" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="361" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a433fc8ce13f9fb2b684287a2737abb11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getReactivePowerLimits</definition>
        <argsstring>(void)</argsstring>
        <name>getReactivePowerLimits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="365" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="365" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a40c630beaa96956b4604bbf71bd72f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setReactivePowerLimits</definition>
        <argsstring>(void)</argsstring>
        <name>setReactivePowerLimits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="368" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="368" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a1aba6e6c12734fa4d15a4104dd8119ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getRealCurrentLimits</definition>
        <argsstring>(void)</argsstring>
        <name>getRealCurrentLimits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="372" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="372" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1acbbd7c4e75df278d8ad6a16a85ad9893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setRealCurrentLimits</definition>
        <argsstring>(void)</argsstring>
        <name>setRealCurrentLimits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="375" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="375" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a60b76e8138681685279fb0b34993bef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getReactiveCurrentLimits</definition>
        <argsstring>(void)</argsstring>
        <name>getReactiveCurrentLimits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="379" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="379" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1aa5c2ab7bc604c48ecd83d23475331d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setReactiveCurrentLimits</definition>
        <argsstring>(void)</argsstring>
        <name>setReactiveCurrentLimits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="382" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="382" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a18f4e87a6cfdedd8eb8502e74561c190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getMesdGeneralCalibration</definition>
        <argsstring>(void)</argsstring>
        <name>getMesdGeneralCalibration</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="386" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a3c49368e5524c202d323bf627f5aeb6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMesdGeneralCalibration</definition>
        <argsstring>(void)</argsstring>
        <name>setMesdGeneralCalibration</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="390" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="390" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a099ba9a26750952c8cdea5e8523634bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSimAcNetworkPhaseSourceU</definition>
        <argsstring>(void)</argsstring>
        <name>setSimAcNetworkPhaseSourceU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="582" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="582" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a5e219ca5ed6b5dd5292eee721c6aff01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getSimAcNetworkPhaseSourceU</definition>
        <argsstring>(void)</argsstring>
        <name>getSimAcNetworkPhaseSourceU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="587" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1ac327c73a34d31a6cf229c924462f641b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSimAcNetworkPhaseSourceV</definition>
        <argsstring>(void)</argsstring>
        <name>setSimAcNetworkPhaseSourceV</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="592" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="592" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a4e504c8df14077f58812b255a182041e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getSimAcNetworkPhaseSourceV</definition>
        <argsstring>(void)</argsstring>
        <name>getSimAcNetworkPhaseSourceV</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="597" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="597" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1ae767960b9dae7d642d15b8926695b75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSimAcNetworkPhaseSourceW</definition>
        <argsstring>(void)</argsstring>
        <name>setSimAcNetworkPhaseSourceW</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="602" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="602" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a9debf93b30de3af0309b1fd6af095860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getSimAcNetworkPhaseSourceW</definition>
        <argsstring>(void)</argsstring>
        <name>getSimAcNetworkPhaseSourceW</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="607" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="607" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a9ace797ae2b711673c82fb4d90ae7717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSimAcNetworkPhaseLoadU</definition>
        <argsstring>(void)</argsstring>
        <name>setSimAcNetworkPhaseLoadU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="612" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="612" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a9deab59ec06f1110d9cf09aaeec93459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getSimAcNetworkPhaseLoadU</definition>
        <argsstring>(void)</argsstring>
        <name>getSimAcNetworkPhaseLoadU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="617" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="617" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1ac920ca45c9d3f12ffcf94765f7f32c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSimAcNetworkPhaseLoadV</definition>
        <argsstring>(void)</argsstring>
        <name>setSimAcNetworkPhaseLoadV</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="622" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="622" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1aa113f33ce427d100a61c6fb97148ba57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getSimAcNetworkPhaseLoadV</definition>
        <argsstring>(void)</argsstring>
        <name>getSimAcNetworkPhaseLoadV</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="627" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="627" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1adde16125808d042f784f6534bffdc150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSimAcNetworkPhaseLoadW</definition>
        <argsstring>(void)</argsstring>
        <name>setSimAcNetworkPhaseLoadW</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="632" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="632" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1addccb6e61bf93cf24b3eb31c1e54e2f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getSimAcNetworkPhaseLoadW</definition>
        <argsstring>(void)</argsstring>
        <name>getSimAcNetworkPhaseLoadW</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="637" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="637" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1ad4603bcb31061e237822bf91bb33ca3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPpcAplCoeffsQSG</definition>
        <argsstring>(void)</argsstring>
        <name>getPpcAplCoeffsQSG</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="642" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="642" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a8b1ade2f290e5dfc06473c88d4760789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPpcAplCoeffsQSG</definition>
        <argsstring>(void)</argsstring>
        <name>setPpcAplCoeffsQSG</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="654" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="654" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a12a740156e0379be387ac042ce47c60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPpcAplCoeffsLFL</definition>
        <argsstring>(void)</argsstring>
        <name>getPpcAplCoeffsLFL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="660" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="660" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a7cc2a42cf68267f853b14a7425f842b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPpcAplCoeffsLFL</definition>
        <argsstring>(void)</argsstring>
        <name>setPpcAplCoeffsLFL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="670" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="670" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a28313b828d65d67bc6f8af5ab033c31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPpcAplLimitsLFL</definition>
        <argsstring>(void)</argsstring>
        <name>getPpcAplLimitsLFL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="675" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="675" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a9ac2023f7aa37aa1a6cd2b8f48877fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPpcAplLimitsLFL</definition>
        <argsstring>(void)</argsstring>
        <name>setPpcAplLimitsLFL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="685" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="685" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a0815f3e91cb4134a9fee2b4543a19f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPpcAplLockDetect</definition>
        <argsstring>(void)</argsstring>
        <name>getPpcAplLockDetect</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="690" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="690" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a1fb2707449888c61ecaed639a1d0eebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPpcAplLockDetect</definition>
        <argsstring>(void)</argsstring>
        <name>setPpcAplLockDetect</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="702" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="702" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1aa68e0bf5034385046a8a968e1813f769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPpcAplMeasAdjust</definition>
        <argsstring>(void)</argsstring>
        <name>getPpcAplMeasAdjust</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="708" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="708" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1ad562ed2adbbf0401efa0aa76ff7899f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPpcAplMeasAdjust</definition>
        <argsstring>(void)</argsstring>
        <name>setPpcAplMeasAdjust</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="718" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="718" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a187612318fec45f237793a46ca358d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPccMeasurementConfig</definition>
        <argsstring>(void)</argsstring>
        <name>setPccMeasurementConfig</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="724" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="724" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1aa559c7f5ca69d7f356f4de0c3d8dc79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPccMeasurementConfig</definition>
        <argsstring>(void)</argsstring>
        <name>getPccMeasurementConfig</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="729" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="729" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a6a4fe470125884df9881615e979428f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPccArCoeffsVdc</definition>
        <argsstring>(void)</argsstring>
        <name>setPccArCoeffsVdc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="734" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="734" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a3fecead1b5d660a67d52e7c54c4031aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getPccArCoeffsVdc</definition>
        <argsstring>(void)</argsstring>
        <name>getPccArCoeffsVdc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="740" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="740" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a500d058a67c7698a0ea10b1be8e83406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getStatusFaults</definition>
        <argsstring>(void)</argsstring>
        <name>getStatusFaults</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="758" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="758" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a8ba89c16ba44ad7e14981c135c2bd8e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getStatusFaults2</definition>
        <argsstring>(void)</argsstring>
        <name>getStatusFaults2</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="791" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="791" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1ac7554b3bedeba6e81305b3d36a971bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getStatusSystemFaults</definition>
        <argsstring>(void)</argsstring>
        <name>getStatusSystemFaults</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="808" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="808" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a168a8209def14070d92016774b72ef81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getStatusWarnings</definition>
        <argsstring>(void)</argsstring>
        <name>getStatusWarnings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="825" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="825" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a35d14aae8a00de33809c34ea29020951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getDataloggerStatus</definition>
        <argsstring>(void)</argsstring>
        <name>getDataloggerStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="842" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="842" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a9dc159926a02f9570bf4c8934c379bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getBuildTime</definition>
        <argsstring>(void)</argsstring>
        <name>getBuildTime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="847" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="847" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a780c49310495e78fa502391f5299a87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getSoftwareHash</definition>
        <argsstring>(void)</argsstring>
        <name>getSoftwareHash</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="851" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="851" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a84a0f351f2186ce06a6e3a7d1d13ad32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getLoggerStatus01</definition>
        <argsstring>(void)</argsstring>
        <name>getLoggerStatus01</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="855" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="855" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a1c41607124c2a3edfba4aca78b93e253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void canInterfaceInit</definition>
        <argsstring>(int canID, int SA_mask, CAN_BAUDRATE baud, uint32_t buildTime, uint32_t buildGitRev)</argsstring>
        <name>canInterfaceInit</name>
        <param>
          <type>int</type>
          <declname>canID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>SA_mask</declname>
        </param>
        <param>
          <type>CAN_BAUDRATE</type>
          <declname>baud</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buildTime</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buildGitRev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="859" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="859" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a31d3fc8d069a47ffa33cc0262f326027" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long double</type>
        <definition>static long double canScale</definition>
        <argsstring>(long double value, int16_t ssf)</argsstring>
        <name>canScale</name>
        <param>
          <type>long double</type>
          <declname>value</declname>
          <briefdescription><para>[in ] unscaled value </para>
</briefdescription>
        </param>
        <param>
          <type>int16_t</type>
          <declname>ssf</declname>
          <briefdescription><para>[in ] Sunspec scale factor </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="892" column="27" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="892" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a39a21ea844fd21be0c1ac875ba3231d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long double</type>
        <definition>long double canInterface_itemNetMultiplier</definition>
        <argsstring>(InterfaceItemCommon const *const item)</argsstring>
        <name>canInterface_itemNetMultiplier</name>
        <param>
          <type><ref refid="struct_interface_item_common" kindref="compound">InterfaceItemCommon</ref> const *const</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="901" column="13" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="901" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a6aadaf337d1caee0a760aa9ae127360d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void items_getMeta</definition>
        <argsstring>(Meta_Enum meta_index, InterfaceItem_void const *const *const items, uint16_t items_count)</argsstring>
        <name>items_getMeta</name>
        <param>
          <type>Meta_Enum</type>
          <declname>meta_index</declname>
        </param>
        <param>
          <type><ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref> const *const *const</type>
          <declname>items</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>items_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="905" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="905" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1ad509994a37bdba87b40e6407e5523b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void items_setMeta</definition>
        <argsstring>(Meta_Enum meta_index, InterfaceItem_void const *const *const items, uint16_t items_count)</argsstring>
        <name>items_setMeta</name>
        <param>
          <type>Meta_Enum</type>
          <declname>meta_index</declname>
        </param>
        <param>
          <type><ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref> const *const *const</type>
          <declname>items</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>items_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="914" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="914" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a00ca1b7737ba8d9bf03aa228a2186171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void table_items_getMeta</definition>
        <argsstring>(Meta_Enum meta_index, InterfaceItem_void const *const *const items, uint16_t items_count)</argsstring>
        <name>table_items_getMeta</name>
        <param>
          <type>Meta_Enum</type>
          <declname>meta_index</declname>
        </param>
        <param>
          <type><ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref> const *const *const</type>
          <declname>items</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>items_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="922" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="922" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="can_interface_8c_1a176414fba733ccb522284cdd7fbe31ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void table_items_setMeta</definition>
        <argsstring>(Meta_Enum meta_index, InterfaceItem_void const *const *const items, uint16_t items_count)</argsstring>
        <name>table_items_setMeta</name>
        <param>
          <type>Meta_Enum</type>
          <declname>meta_index</declname>
        </param>
        <param>
          <type><ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref> const *const *const</type>
          <declname>items</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>items_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" line="928" column="6" bodyfile="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c" bodystart="928" bodyend="934"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="can_interface_8h" kindref="compound">canInterface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="revision_info_8h" kindref="compound">revisionInfo.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Basic<sp/>Types<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_i_qmath_lib_8h" kindref="compound">IQmathLib.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dsp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Application<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="application_8h" kindref="compound">application.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interface_8h" kindref="compound">interface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;canInterfaceGen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reference<sp/>Handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gridConnectionStatus.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>System<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;system.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;scheduler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;faultHandler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dataLogger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;eepromHandler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;modbusHandler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sunspecInterfaceGen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;canHandler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;authorization.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Supervisor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;deviceThermalModel.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;protectionsI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;supervisor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gridMonitor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;IEEE1547.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fanControl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Control<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;topLevelControl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;powerConversionControl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;phaseConfigDetectI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;islandControlI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;phaseCurrentControlI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;adaptiveHarmonicControlI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;phasePllI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;auxiliaryPllI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;protectedBusControlI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;phaseControlI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;filterObserverI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;afe.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dcdcControl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;referenceHandler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;epc2P2Z.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Modulator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;modulatorI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>hardware<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;simulateFeedbackI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;channelMappingManagerI.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Utils<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Drivers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;measurementd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pwmd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;digitalIO.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ccp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;humiditySensor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Math<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MTH_constants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MTH_scale.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Customer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ABB_libPrimaryControl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;canInterfaceGen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>V_CMD_SCALE<sp/>(10.0f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HZ_CMD_SCALE<sp/>(100.0f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SC_STATUS_SCALE<sp/>(10.0f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VDC_SCALE<sp/>(10.0f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lastResetDatalogger<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lastTriggerDatalogger<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>canInterfaceUpdateTx_1ms(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusSymmQty.CurrentPS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(REF_getAcMonitorScGridCurrentRms_SI(XFM_VECT_SC_ELE_PS)<sp/>*<sp/><ref refid="can_interface_8c_1aa37274d148cf019caf08d558bddeb883" kindref="member">SC_STATUS_SCALE</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusSymmQty.CurrentNS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(REF_getAcMonitorScGridCurrentRms_SI(XFM_VECT_SC_ELE_NS)<sp/>*<sp/><ref refid="can_interface_8c_1aa37274d148cf019caf08d558bddeb883" kindref="member">SC_STATUS_SCALE</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusSymmQty.LineVoltagePS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(REF_getAcMonitorScGridVoltageRms_SI(XFM_VECT_SC_ELE_PS)<sp/>*<sp/><ref refid="can_interface_8c_1aa37274d148cf019caf08d558bddeb883" kindref="member">SC_STATUS_SCALE</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusSymmQty.LineVoltageNS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(REF_getAcMonitorScGridVoltageRms_SI(XFM_VECT_SC_ELE_NS)<sp/>*<sp/><ref refid="can_interface_8c_1aa37274d148cf019caf08d558bddeb883" kindref="member">SC_STATUS_SCALE</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusSymmCurrentComp.CurrentRealPS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(REF_getAcMonitorScGridCurrentCompRms_SI(XFM_VECT_SR_ELE_PS,<sp/>XFM_VECT_R_ELE_D)<sp/>*<sp/><ref refid="can_interface_8c_1aa37274d148cf019caf08d558bddeb883" kindref="member">SC_STATUS_SCALE</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusSymmCurrentComp.CurrentReactivePS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(REF_getAcMonitorScGridCurrentCompRms_SI(XFM_VECT_SR_ELE_PS,<sp/>XFM_VECT_R_ELE_Q)<sp/>*<sp/><ref refid="can_interface_8c_1aa37274d148cf019caf08d558bddeb883" kindref="member">SC_STATUS_SCALE</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusSymmCurrentComp.CurrentRealNS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(REF_getAcMonitorScGridCurrentCompRms_SI(XFM_VECT_SR_ELE_NS,<sp/>XFM_VECT_R_ELE_D)<sp/>*<sp/><ref refid="can_interface_8c_1aa37274d148cf019caf08d558bddeb883" kindref="member">SC_STATUS_SCALE</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusSymmCurrentComp.CurrentReactiveNS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(REF_getAcMonitorScGridCurrentCompRms_SI(XFM_VECT_SR_ELE_NS,<sp/>XFM_VECT_R_ELE_Q)<sp/>*<sp/><ref refid="can_interface_8c_1aa37274d148cf019caf08d558bddeb883" kindref="member">SC_STATUS_SCALE</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>canInterfaceUpdateTx_10ms(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>APP_eState_t<sp/><sp/><sp/><sp/>state<sp/><sp/><sp/>=<sp/>GCS_getStateNumber();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_ErrorStatus<sp/>busStat<sp/>=<sp/>CAND_updateFaultStatus();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusMeasuredPower.RealPower_measured<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int32_t)myround(PCC_getAcMonitorGridPowerRms_SI(0U,<sp/>PCC_ACM_REAL)<sp/><sp/><sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1a0f45377ecf0285616fff0c525b34a327" kindref="member">POWER_SCALE</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusMeasuredPower.ReactivePower_measured<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int32_t)myround(PCC_getAcMonitorGridPowerRms_SI(0U,<sp/>PCC_ACM_REACTIVE)<sp/>*<sp/><ref refid="can_interface_8h_1a0f45377ecf0285616fff0c525b34a327" kindref="member">POWER_SCALE</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusMeasuredPower.ApparentPower_measured<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int32_t)myround(PCC_getAcMonitorGridPowerRms_SI(0U,<sp/>PCC_ACM_APPARENT)<sp/>*<sp/><ref refid="can_interface_8h_1a0f45377ecf0285616fff0c525b34a327" kindref="member">POWER_SCALE</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusCommandedPower.RealPower_echo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int32_t)myround(REF_getPps()<sp/>*<sp/>10.0e-3f);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusCommandedPower.ReactivePower_echo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int32_t)myround(REF_getQps()<sp/>*<sp/>10.0e-3f);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusCommandedMpptPowerDcdc.Power<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int32_t)myround(DCDC_getReferencePowerMppt()<sp/>*<sp/>10.0e-3f);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusCommandedCurrent.RealCurrent_echo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int32_t)REF_getIdPs();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusCommandedCurrent.ReactiveCurrent_echo<sp/><sp/><sp/><sp/><sp/>=<sp/>(int32_t)REF_getIqPs();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusCommandedDcControl.dcVoltageLimit_echo<sp/><sp/><sp/><sp/>=<sp/>(uint16_t)<sp/>roundf(REF_getVdcLim());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDcDc.CurrentRefHi_VoltageCtl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(DCDC_getReferenceCurrentCtrlSrcTot(DCDC_CTRL_SRC_VOLTAGE_HI,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>*<sp/>10.0f);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDcDc.CurrentRefLo_CurrentCtl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(DCDC_getReferenceCurrentCtrlSrcTot(DCDC_CTRL_SRC_CURRENT_LO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/><sp/>*<sp/>10.0f);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDcDc.CurrentRefLo_MPPT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(DCDC_getReferenceCurrentCtrlSrcTot(DCDC_CTRL_SRC_MPPT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/><sp/>*<sp/>10.0f);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDCValues.DcVoltageHi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getDcMonitorDcVoltage_SI()<sp/>*<sp/><ref refid="can_interface_8c_1a30aff053a671a32c2f04e915cc7b00a2" kindref="member">VDC_SCALE</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDCValues.DcCurrentHi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getDcMonitorDcCurrent_SI());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDCValues.DcVoltageLo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getDcMonitorInVoltage_SI()<sp/>*<sp/><ref refid="can_interface_8c_1a30aff053a671a32c2f04e915cc7b00a2" kindref="member">VDC_SCALE</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDCValues.DcCurrentLo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getDcMonitorInCurrent_SI());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDCVoltage3L.DcMidpointOffset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getDcMonitorDcMidpointOffset_SI());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDCVoltage3L.DcMidpointRipple<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getDcMonitorDcMidpointRipple_SI());</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusGridMonitorLoc.NetworkVoltage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(0U,<sp/>CMM_AC_NETWORK_LOCAL,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_LINE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusGridMonitorLoc.NetworkFrequency<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getAcMonitorFrequencyHz_SI(0U,<sp/>CMM_AC_NETWORK_LOCAL)<sp/>*<sp/><ref refid="can_interface_8c_1a6b57379d32d3533e60eef8f3e395663b" kindref="member">HZ_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusGridMonitorLoc.NetworkInSpec<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>gridMonitor_isNetworkUsable(CMM_AC_NETWORK_LOCAL);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusGridMonitorLoc.VoltageDetected<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>gridMonitor_isNetworkLive(CMM_AC_NETWORK_LOCAL);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.State<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>warningStat.flags.CANWarning<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>busStat.Warning;<sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>warningStat.flags.CANErrorPassive<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>busStat.ErrorPassive;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.Warning<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>WARNING_ACTIVE();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.Enable_echo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>systemGetMasterEnable();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.FaultClr_echo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>systemGetFaultClearCmd();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.WarningClr_echo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="interface_accessors_8c_1a88f562c1031cccffe74fb20b4ca06060" kindref="member">INTF_commandFlags</ref>.<ref refid="struct_i_n_t_f___command_flags_1a7a3579235e0e2a5efece0fbc2c1aba55" kindref="member">clearWarnings</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.K1PrechargePermissive<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>IOH_isRelayClosed(IOH_RELAY_K1);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.K2DCRunPermissive<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>IOH_isRelayClosed(IOH_RELAY_K2);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.MX1Permissive<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>IOH_isRelayClosed(IOH_RELAY_MX1);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.MX2Permissive<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>IOH_isRelayClosed(IOH_RELAY_MX2);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.PowerAvailDC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(!faultStat.flags.DCUndervoltage)<sp/>&amp;&amp;<sp/>IOH_isRelayClosed(IOH_RELAY_K2);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.PowerCircuitEnabled<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(PWMD_getControlGroupGenState(CMM_CONTROL_GROUP_CNT,<sp/>0U)<sp/>==<sp/>PWMD_GENERATION_ACTIVE);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.HardwareEnable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>supervisorGetHardwareEnable();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.MessageValidModeControl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>systemGetMasterAlive();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.MessageValidPowerCMD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>REF_getPwrCmdValid();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.MessageValidCurrentCMD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>REF_getCurCmdValid();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.MessageValidDcControl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>REF_getDcCmdValid();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.IslandReconnect_echo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="interface_accessors_8c_1a88f562c1031cccffe74fb20b4ca06060" kindref="member">INTF_commandFlags</ref>.<ref refid="struct_i_n_t_f___command_flags_1a0704ebf6a2d9622d12dd3713aacca9ac" kindref="member">islandReconnect</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.ProtBusSequence<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PBC_getConnectSequenceStatus_0();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>want<sp/>DI<sp/>number<sp/>regardless<sp/>of<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>numeric<sp/>index<sp/>instead<sp/>of<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.DI1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>digitalInputRead(&amp;digins[0]);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.DI2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>digitalInputRead(&amp;digins[1]);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.DI3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>digitalInputRead(&amp;digins[2]);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.DI4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>digitalInputRead(&amp;digins[3]);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusPhaseVoltageLoc.VoltageU<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(1U,<sp/>CMM_AC_NETWORK_LOCAL,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_PHASE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusPhaseVoltageLoc.VoltageV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(2U,<sp/>CMM_AC_NETWORK_LOCAL,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_PHASE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusPhaseVoltageLoc.VoltageW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(3U,<sp/>CMM_AC_NETWORK_LOCAL,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_PHASE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusLineVoltageLoc.VoltageUV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(1U,<sp/>CMM_AC_NETWORK_LOCAL,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_LINE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusLineVoltageLoc.VoltageVW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(2U,<sp/>CMM_AC_NETWORK_LOCAL,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_LINE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusLineVoltageLoc.VoltageWU<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(3U,<sp/>CMM_AC_NETWORK_LOCAL,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_LINE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PCC_ConfigDataI.ac.iMonSelect<sp/>==<sp/>PCC_ACM_GRID)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusPhaseCurrent.CurrentU<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridCurrentRms_SI(1U,<sp/>PCC_ACM_APPARENT));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusPhaseCurrent.CurrentV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridCurrentRms_SI(2U,<sp/>PCC_ACM_APPARENT));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusPhaseCurrent.CurrentW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridCurrentRms_SI(3U,<sp/>PCC_ACM_APPARENT));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusCurrentActual.CurrentReal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getAcMonitorGridCurrentRms_SI(0U,<sp/>PCC_ACM_REAL));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusCurrentActual.CurrentReactive<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getAcMonitorGridCurrentRms_SI(0U,<sp/>PCC_ACM_REACTIVE));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusCurrentActual.CurrentApparent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getAcMonitorGridCurrentRms_SI(0U,<sp/>PCC_ACM_APPARENT));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusPhaseCurrent.CurrentU<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorConvCurrentRms_SI(1U,<sp/>PCC_ACM_APPARENT));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusPhaseCurrent.CurrentV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorConvCurrentRms_SI(2U,<sp/>PCC_ACM_APPARENT));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusPhaseCurrent.CurrentW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorConvCurrentRms_SI(3U,<sp/>PCC_ACM_APPARENT));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusCurrentActual.CurrentReal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getAcMonitorConvCurrentRms_SI(0U,<sp/>PCC_ACM_REAL));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusCurrentActual.CurrentReactive<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getAcMonitorConvCurrentRms_SI(0U,<sp/>PCC_ACM_REACTIVE));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusCurrentActual.CurrentApparent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getAcMonitorConvCurrentRms_SI(0U,<sp/>PCC_ACM_APPARENT));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>canInterfaceUpdateTx_100ms(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.PumpRun<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ENV_getPumpRunState();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusBits.PumpFault<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ENV_getPumpFaultState();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusTemps.FanSpeed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>fanCoolant.set*20;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusTempsMeasured.tInternal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(<sp/>HTS_getTemperature()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusTempsMeasured.tInlet<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(<ref refid="_i_qmath_lib_8h_1ab922b201a8128cea9d37a6a076473fe7" kindref="member">_IQ22toF</ref>(MESD_Measurements.aux.temp.meas.tAuxA)<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusTempsMeasured.tBridgeA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(<ref refid="_i_qmath_lib_8h_1ab922b201a8128cea9d37a6a076473fe7" kindref="member">_IQ22toF</ref>(MESD_Measurements.aux.temp.meas.tInverterA)<sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusTempsMeasured.tBridgeB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(<ref refid="_i_qmath_lib_8h_1ab922b201a8128cea9d37a6a076473fe7" kindref="member">_IQ22toF</ref>(MESD_Measurements.aux.temp.meas.tInverterB)<sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(DTM_ConfigDataI.monitor.monSelect)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DTM_MONITOR_SELECT_TMAX:</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_A<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_A)<sp/><sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_B<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_B)<sp/><sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_C<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_C)<sp/><sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_D<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_D)<sp/><sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel2.TPvj_E<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_E)<sp/><sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel2.TPvj_F<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_F)<sp/><sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DTM_MONITOR_SELECT_DTMAX:</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_A<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxDT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_A)<sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_B<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxDT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_B)<sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_C<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxDT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_C)<sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_D<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxDT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_D)<sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel2.TPvj_E<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxDT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_E)<sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel2.TPvj_F<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxDT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_F)<sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DTM_MONITOR_SELECT_PLOSS:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_A<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueLoss(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_A,<sp/>DTM_ConfigDataI.monitor.lossSelect)<sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_B<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueLoss(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_B,<sp/>DTM_ConfigDataI.monitor.lossSelect)<sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_C<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueLoss(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_C,<sp/>DTM_ConfigDataI.monitor.lossSelect)<sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel1.TPvj_D<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueLoss(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_D,<sp/>DTM_ConfigDataI.monitor.lossSelect)<sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel2.TPvj_E<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueLoss(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_E,<sp/>DTM_ConfigDataI.monitor.lossSelect)<sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StatusDeviceThermalModel2.TPvj_F<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueLoss(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_F,<sp/>DTM_ConfigDataI.monitor.lossSelect)<sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDeviceThermalModel2.Tvj_max<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getSummaryValueMaxT(CMM_CONTROL_GROUP_AC,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_CNT)<sp/><sp/><sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDeviceThermalModel2.Tsense<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)<sp/>myround(DTM_getEstimatedSenseT()<sp/>*<sp/><ref refid="can_interface_8h_1ab909947eb49bfce3b280b12ef3e7f5fc" kindref="member">TEMPERATURE_SCALE</ref>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusDeviceThermalModel3.Pl_tot<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(DTM_getSummaryValueLoss(CMM_CONTROL_GROUP_CNT,<sp/>0U,<sp/>DTM_DEVICE_PROPERTY_SET_CNT,<sp/>DTM_LOSS_TYPE_SUM));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusGridMonitorRem.NetworkVoltage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(0U,<sp/>CMM_AC_NETWORK_REMOTE,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_LINE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusGridMonitorRem.NetworkFrequency<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(PCC_getAcMonitorFrequencyHz_SI(0U,<sp/>CMM_AC_NETWORK_REMOTE)<sp/>*<sp/><ref refid="can_interface_8c_1a6b57379d32d3533e60eef8f3e395663b" kindref="member">HZ_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusGridMonitorRem.NetworkInSpec<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>gridMonitor_isNetworkUsable(CMM_AC_NETWORK_REMOTE);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusGridMonitorRem.VoltageDetected<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>gridMonitor_isNetworkLive(CMM_AC_NETWORK_REMOTE);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusGridMonitorRem.PhaseSequence<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PCD_getPhaseSequenceDetect(CMM_AC_NETWORK_REMOTE);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusGridMonitorLoc.PhaseSequence<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PCD_getPhaseSequenceDetect(CMM_AC_NETWORK_LOCAL);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusPhaseVoltageRem.VoltageU<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(1U,<sp/>CMM_AC_NETWORK_REMOTE,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_PHASE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusPhaseVoltageRem.VoltageV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(2U,<sp/>CMM_AC_NETWORK_REMOTE,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_PHASE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusPhaseVoltageRem.VoltageW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(3U,<sp/>CMM_AC_NETWORK_REMOTE,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_PHASE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusLineVoltageRem.VoltageUV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(1U,<sp/>CMM_AC_NETWORK_REMOTE,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_LINE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusLineVoltageRem.VoltageVW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(2U,<sp/>CMM_AC_NETWORK_REMOTE,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_LINE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusLineVoltageRem.VoltageWU<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(PCC_getAcMonitorGridVoltageRms_SI(3U,<sp/>CMM_AC_NETWORK_REMOTE,<sp/>PCC_ACM_APPARENT,<sp/>PCC_ACM_LINE)<sp/>*<sp/><ref refid="can_interface_8c_1a9498092c6ac20577e2f7ceb794b823da" kindref="member">V_CMD_SCALE</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1aa05e7dbca4ce3c6efc8800cd471a26cd" kindref="member">updateProcessToInverter</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>idx<sp/>=<sp/>getProcessToInverterEnumsIndex(ProcessToInverter.CommandModeControl.Mux);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>MuxUpdateFncs<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mux_data<sp/>=<sp/>&amp;updateProcessToInverterEnums[idx];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mux_data-&gt;set<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mux_data-&gt;set(Meta_Value,<sp/>mux_data-&gt;items,<sp/>mux_data-&gt;items_count);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mux_data-&gt;onWrite<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mux_data-&gt;onWrite(Meta_Value,<sp/>mux_data-&gt;items,<sp/>mux_data-&gt;items_count);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Stupid<sp/>meta<sp/>parameters...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a9199144a6fe802b4c16090de601b076b" kindref="member">getParam0</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1aee6dd93d939168638c22556f54a69461" kindref="member">getPccConfigParams</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a4cb0b9db2e2d4e8b83e6f7737bba5424" kindref="member">setPccConfigParams</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a468223789e27d85616228fb51b31216f" kindref="member">getPrechargeTimes</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1ab73ca43bc1778cb2e7ec352df6bc19de" kindref="member">setPrechargeTimes</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a4aeb685f3138ff377ca5b945befee597" kindref="member">getPrechargeSecondary</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a166df2b7557c436751661104e263036a" kindref="member">setPrechargeSecondary</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CANIF_PROT_PHASE_INSTANT_TRIP(mGrp)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor">void<sp/>getProtPhaseInstantTrip_##mGrp(void)<sp/>{<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor">void<sp/>setProtPhaseInstantTrip_##mGrp(void)<sp/>{<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><ref refid="can_interface_8c_1af3331df6db97622344010ba1bf55ef42" kindref="member">CANIF_PROT_PHASE_INSTANT_TRIP</ref>(AC)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="can_interface_8c_1af3331df6db97622344010ba1bf55ef42" kindref="member">CANIF_PROT_PHASE_INSTANT_TRIP</ref>(DC)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a2eea791cce9340f4feb9c7955dcc1506" kindref="member">getProtDcBusInstantTrip</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a76eb3e3b40b81d75dc7edff6cb954eae" kindref="member">setProtDcBusInstantTrip</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CANIF_PROT_TIMED_OVERLOAD_TRIP(mName)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor">void<sp/>getProtTimedOverloadTrip_##mName(void)<sp/>{<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor">void<sp/>setProtTimedOverloadTrip_##mName(void)<sp/>{<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><ref refid="can_interface_8c_1ad35d743eb8bc1c1c4f077b4e62715dc4" kindref="member">CANIF_PROT_TIMED_OVERLOAD_TRIP</ref>(AcPhase_1)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><ref refid="can_interface_8c_1ad35d743eb8bc1c1c4f077b4e62715dc4" kindref="member">CANIF_PROT_TIMED_OVERLOAD_TRIP</ref>(AcPhase_2)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><ref refid="can_interface_8c_1ad35d743eb8bc1c1c4f077b4e62715dc4" kindref="member">CANIF_PROT_TIMED_OVERLOAD_TRIP</ref>(DcInput)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><ref refid="can_interface_8c_1ad35d743eb8bc1c1c4f077b4e62715dc4" kindref="member">CANIF_PROT_TIMED_OVERLOAD_TRIP</ref>(DcBus)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a04390bfa764f4fe3c76286aea5ba97aa" kindref="member">setDataloggerConfig</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ParameterQuery.DataloggerConfig.ResetDatalogger<sp/>&amp;&amp;<sp/>!lastResetDatalogger)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataLogger_reset();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ParameterQuery.DataloggerConfig.ForceTrigger<sp/>&amp;&amp;<sp/>!lastTriggerDatalogger)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataLogger_triggerNow();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>lastResetDatalogger<sp/><sp/><sp/><sp/><sp/>=<sp/>ParameterQuery.DataloggerConfig.ResetDatalogger;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>lastTriggerDatalogger<sp/><sp/><sp/>=<sp/>ParameterQuery.DataloggerConfig.ForceTrigger;</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1ad19f56c94e51d8b2a65040a7d7aa548b" kindref="member">getDataloggerConfig</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.DataloggerConfig.ResetDatalogger<sp/>=<sp/>lastResetDatalogger;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a28bf5ea74276cf6c228f3391e11753c3" kindref="member">getManageNV</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.ManageNV.SaveToEE_command<sp/>=<sp/>eeHandlerGetSaveInProgress();</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1aff9e6d01761a25ca3b42366129ed47ef" kindref="member">setManageNV</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>eeHandlerSave(ParameterQuery.ManageNV.SaveToEE_command<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATALOGGER_CHUNK_INDEX<sp/>(ParameterQuery.Param0.Mux<sp/>-<sp/>ParameterQuery_LoggerChunk01)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1aff4d8f19e8787acc8126c2628bc3d815" kindref="member">getLoggerConf01</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a8fadb47ed46d0e9efb149ad460fbd5f9" kindref="member">setLoggerConf01</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>dataLogger_setConf01(&amp;dataLoggerParams);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1abe88e5ee2ecd92f9559467be700bcd16" kindref="member">getRealPowerLimits</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a0d33a18bebc3f854bd6bcbe5482f1d01" kindref="member">setRealPowerLimits</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>REF_setLimits();</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a433fc8ce13f9fb2b684287a2737abb11" kindref="member">getReactivePowerLimits</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a40c630beaa96956b4604bbf71bd72f43" kindref="member">setReactivePowerLimits</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>REF_setLimits();</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a1aba6e6c12734fa4d15a4104dd8119ef" kindref="member">getRealCurrentLimits</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1acbbd7c4e75df278d8ad6a16a85ad9893" kindref="member">setRealCurrentLimits</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>REF_setLimits();</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a60b76e8138681685279fb0b34993bef5" kindref="member">getReactiveCurrentLimits</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1aa5c2ab7bc604c48ecd83d23475331d99" kindref="member">setReactiveCurrentLimits</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>REF_setLimits();</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a18f4e87a6cfdedd8eb8502e74561c190" kindref="member">getMesdGeneralCalibration</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.MesdGeneralCalibration.trigCalTime<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>myround(MESD_ConfigI.triggeredCalTime<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a3c49368e5524c202d323bf627f5aeb6d" kindref="member">setMesdGeneralCalibration</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>MESD_setConfigGeneralCalibration((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.MesdGeneralCalibration.trigCalTime<sp/>*<sp/>10.0e-3);</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CANIF_MESD_CHANNEL_CALIBRATION(mChan,<sp/>mGget,<sp/>mGset)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>getMesdChannelCalibration_##mChan(void)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.MesdChannelCalibration_##mChan.Offset<sp/><sp/><sp/><sp/>=<sp/>myround(MESD_ConfigI.offsetGain[MESD_CHANNEL_##mChan].offset<sp/><sp/><sp/><sp/>*<sp/>10.0e3f);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.MesdChannelCalibration_##mChan.Gain<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>myround(MESD_ConfigI.offsetGain[MESD_CHANNEL_##mChan].gain<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>mGget);<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.MesdChannelCalibration_##mChan.OffsetTau<sp/>=<sp/>myround(MESD_ConfigI.offsetGain[MESD_CHANNEL_##mChan].tau<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>16.0f);<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.MesdChannelCalibration_##mChan.CalPermit<sp/>=<sp/>MESD_ConfigI.offsetGain[MESD_CHANNEL_##mChan].offsetCalPermit;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>setMesdChannelCalibration_##mChan(void)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESD_setConfigChannelCalibration(MESD_CHANNEL_##mChan,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.MesdChannelCalibration_##mChan.Offset<sp/><sp/><sp/><sp/>*<sp/>0.1e-3f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.MesdChannelCalibration_##mChan.Gain<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>mGset,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.MesdChannelCalibration_##mChan.OffsetTau<sp/>*<sp/>0.0625f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MESD_CalibratePermit_t)ParameterQuery.MesdChannelCalibration_##mChan.CalPermit,<sp/>false);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(IPC_1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(IPC_2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(IPC_3,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(IPC_4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(IPC_5,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(IPC_6,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VFB_LO_1,<sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VFB_LO_2,<sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VFB_LO_3,<sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VFB_HI_1,<sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VFB_HI_2,<sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VFB_HI_3,<sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VDC_A,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VDC_B,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(IPEAK,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VOLT_P24V,<sp/><sp/><sp/>200.0f,<sp/>5.0e-3f)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VOLT_P15V,<sp/><sp/><sp/>200.0f,<sp/>5.0e-3f)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VOLT_N15V,<sp/><sp/><sp/>200.0f,<sp/>5.0e-3f)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VOLT_P5V,<sp/><sp/><sp/><sp/>200.0f,<sp/>5.0e-3f)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VOLT_P3V,<sp/><sp/><sp/><sp/>200.0f,<sp/>5.0e-3f)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(VOLT_TP,<sp/><sp/><sp/><sp/><sp/>200.0f,<sp/>5.0e-3f)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(TEMP_INV_A,<sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(TEMP_INV_B,<sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(TEMP_HALFB,<sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(TEMP_AUX_A,<sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(TEMP_AUX_B,<sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><ref refid="can_interface_8c_1a2b93cc14b388bc30f58092613992d8b2" kindref="member">CANIF_MESD_CHANNEL_CALIBRATION</ref>(TEMP_AUX_C,<sp/><sp/>1.0e3f,<sp/>1.0e-3f)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CANIF_MESD_LUT_CALIBRATION(mEnu,<sp/>mNam,<sp/>mIdx)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="445"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>getMesdConfigLutCalibration_##mNam##_##mIdx(void)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.MesdConfigLutCalibration_##mNam##_##mIdx.u<sp/>=<sp/>myround(MESD_ConfigI.bptLookupTable[mEnu][mIdx<sp/>-<sp/>1].x<sp/>*<sp/>20.0e3);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.MesdConfigLutCalibration_##mNam##_##mIdx.y<sp/>=<sp/>myround(MESD_ConfigI.bptLookupTable[mEnu][mIdx<sp/>-<sp/>1].y<sp/>*<sp/>1.0e6);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>setMesdConfigLutCalibration_##mNam##_##mIdx(void)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESD_ConfigI.bptLookupTable[mEnu][mIdx<sp/>-<sp/>1].x<sp/><sp/>=<sp/>(float)ParameterQuery.MesdConfigLutCalibration_##mNam##_##mIdx.u<sp/>*<sp/>5.0e-5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESD_ConfigI.bptLookupTable[mEnu][mIdx<sp/>-<sp/>1].y<sp/><sp/>=<sp/>(float)ParameterQuery.MesdConfigLutCalibration_##mNam##_##mIdx.y<sp/>*<sp/>1.0e-6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MESD_setConfigLutCalibration(mEnu);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_IGBT,<sp/><sp/>tIgbt,<sp/><sp/>1)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_IGBT,<sp/><sp/>tIgbt,<sp/><sp/>2)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_IGBT,<sp/><sp/>tIgbt,<sp/><sp/>3)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_IGBT,<sp/><sp/>tIgbt,<sp/><sp/>4)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_IGBT,<sp/><sp/>tIgbt,<sp/><sp/>5)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_IGBT,<sp/><sp/>tIgbt,<sp/><sp/>6)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_IGBT,<sp/><sp/>tIgbt,<sp/><sp/>7)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_IGBT,<sp/><sp/>tIgbt,<sp/><sp/>8)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_A,<sp/>tAuxA,<sp/><sp/>1)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_A,<sp/>tAuxA,<sp/><sp/>2)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_A,<sp/>tAuxA,<sp/><sp/>3)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_A,<sp/>tAuxA,<sp/><sp/>4)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_A,<sp/>tAuxA,<sp/><sp/>5)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_A,<sp/>tAuxA,<sp/><sp/>6)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_A,<sp/>tAuxA,<sp/><sp/>7)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_A,<sp/>tAuxA,<sp/><sp/>8)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_B,<sp/>tAuxB,<sp/><sp/>1)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_B,<sp/>tAuxB,<sp/><sp/>2)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_B,<sp/>tAuxB,<sp/><sp/>3)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_B,<sp/>tAuxB,<sp/><sp/>4)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_B,<sp/>tAuxB,<sp/><sp/>5)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_B,<sp/>tAuxB,<sp/><sp/>6)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_B,<sp/>tAuxB,<sp/><sp/>7)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_B,<sp/>tAuxB,<sp/><sp/>8)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_C,<sp/>tAuxC,<sp/><sp/>1)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_C,<sp/>tAuxC,<sp/><sp/>2)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_C,<sp/>tAuxC,<sp/><sp/>3)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_C,<sp/>tAuxC,<sp/><sp/>4)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_C,<sp/>tAuxC,<sp/><sp/>5)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_C,<sp/>tAuxC,<sp/><sp/>6)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_C,<sp/>tAuxC,<sp/><sp/>7)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_AUX_C,<sp/>tAuxC,<sp/><sp/>8)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_MOTOR,<sp/>tMotor,<sp/>1)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_MOTOR,<sp/>tMotor,<sp/>2)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_MOTOR,<sp/>tMotor,<sp/>3)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_MOTOR,<sp/>tMotor,<sp/>4)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_MOTOR,<sp/>tMotor,<sp/>5)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_MOTOR,<sp/>tMotor,<sp/>6)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_MOTOR,<sp/>tMotor,<sp/>7)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><ref refid="can_interface_8c_1aa76b32faace09619051cc9848c4d4913" kindref="member">CANIF_MESD_LUT_CALIBRATION</ref>(MESD_LUT_TEMP_MOTOR,<sp/>tMotor,<sp/>8)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CANIF_PROT_TEMP_LIMIT_TRIP(mEnumT,<sp/>mEnumS,<sp/>mTemp,<sp/>mState)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="503"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>getProtTemperatureLimitTrip_##mTemp##_##mState(void)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.limUpper<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myround(PROT_ConfigI.tempTrips.stateNamed.mState.tempNamed.mTemp.boundNamed.upper<sp/>*<sp/>100.0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.limLower<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myround(PROT_ConfigI.tempTrips.stateNamed.mState.tempNamed.mTemp.boundNamed.lower<sp/>*<sp/>100.0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.tripTime<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myround(PROT_ConfigI.tempTrips.stateNamed.mState.tempNamed.mTemp.boundNamed.tTrip<sp/>*<sp/>100.0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>setProtTemperatureLimitTrip_##mTemp##_##mState(void)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PROT_setTemperatureLimitThresholds(mEnumT,<sp/>mEnumS,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.limUpper<sp/>*<sp/>0.01,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.limLower<sp/>*<sp/>0.01,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.ProtTemperatureLimitTrip_##mTemp##_##mState.tripTime<sp/>*<sp/>0.01);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><ref refid="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" kindref="member">CANIF_PROT_TEMP_LIMIT_TRIP</ref>(PROT_TEMP_LIMIT_TINVERTER,<sp/>PROT_OPER_STATE_RUNNING,<sp/>tInverter,<sp/>running)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><ref refid="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" kindref="member">CANIF_PROT_TEMP_LIMIT_TRIP</ref>(PROT_TEMP_LIMIT_TINVERTER,<sp/>PROT_OPER_STATE_STOPPED,<sp/>tInverter,<sp/>stopped)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><ref refid="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" kindref="member">CANIF_PROT_TEMP_LIMIT_TRIP</ref>(PROT_TEMP_LIMIT_TINTERNAL,<sp/>PROT_OPER_STATE_RUNNING,<sp/>tInternal,<sp/>running)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" kindref="member">CANIF_PROT_TEMP_LIMIT_TRIP</ref>(PROT_TEMP_LIMIT_TINTERNAL,<sp/>PROT_OPER_STATE_STOPPED,<sp/>tInternal,<sp/>stopped)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><ref refid="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" kindref="member">CANIF_PROT_TEMP_LIMIT_TRIP</ref>(PROT_TEMP_LIMIT_TDEVICE,<sp/><sp/><sp/>PROT_OPER_STATE_RUNNING,<sp/>tDevice,<sp/><sp/><sp/>running)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><ref refid="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" kindref="member">CANIF_PROT_TEMP_LIMIT_TRIP</ref>(PROT_TEMP_LIMIT_TDEVICE,<sp/><sp/><sp/>PROT_OPER_STATE_STOPPED,<sp/>tDevice,<sp/><sp/><sp/>stopped)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><ref refid="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" kindref="member">CANIF_PROT_TEMP_LIMIT_TRIP</ref>(PROT_TEMP_LIMIT_TINLET,<sp/><sp/><sp/><sp/>PROT_OPER_STATE_RUNNING,<sp/>tInlet,<sp/><sp/><sp/><sp/>running)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><ref refid="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" kindref="member">CANIF_PROT_TEMP_LIMIT_TRIP</ref>(PROT_TEMP_LIMIT_TINLET,<sp/><sp/><sp/><sp/>PROT_OPER_STATE_STOPPED,<sp/>tInlet,<sp/><sp/><sp/><sp/>stopped)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><ref refid="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" kindref="member">CANIF_PROT_TEMP_LIMIT_TRIP</ref>(PROT_TEMP_LIMIT_TDELTA,<sp/><sp/><sp/><sp/>PROT_OPER_STATE_RUNNING,<sp/>tDelta,<sp/><sp/><sp/><sp/>running)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><ref refid="can_interface_8c_1a6cd3fc10889f99cbf41c03644ef81ea3" kindref="member">CANIF_PROT_TEMP_LIMIT_TRIP</ref>(PROT_TEMP_LIMIT_TDELTA,<sp/><sp/><sp/><sp/>PROT_OPER_STATE_STOPPED,<sp/>tDelta,<sp/><sp/><sp/><sp/>stopped)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CANIF_PROT_VOLT_LIMIT_TRIP(mEnumV,<sp/>mVolt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>getProtCtrlVoltageLimitTrip_##mVolt(void)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.ProtCtrlVoltageLimitTrip_##mVolt.limUpper<sp/>=<sp/>myround(PROT_ConfigI.ctrlTrips.voltNamed.mVolt.boundNamed.upper<sp/>*<sp/>1000.0);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParameterQuery.ProtCtrlVoltageLimitTrip_##mVolt.limLower<sp/>=<sp/>myround(PROT_ConfigI.ctrlTrips.voltNamed.mVolt.boundNamed.lower<sp/>*<sp/>1000.0);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor"><sp/><sp/>void<sp/>setProtCtrlVoltageLimitTrip_##mVolt(void)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PROT_setControlVoltageLimitThresholds(mEnumV,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.ProtCtrlVoltageLimitTrip_##mVolt.limUpper<sp/>*<sp/>0.001f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.ProtCtrlVoltageLimitTrip_##mVolt.limLower<sp/>*<sp/>0.001f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="540"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><ref refid="can_interface_8c_1a92f97880f19c821ca76067998268fae5" kindref="member">CANIF_PROT_VOLT_LIMIT_TRIP</ref>(PROT_CTRL_LIMIT_VPOS24,<sp/>vPos24)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><ref refid="can_interface_8c_1a92f97880f19c821ca76067998268fae5" kindref="member">CANIF_PROT_VOLT_LIMIT_TRIP</ref>(PROT_CTRL_LIMIT_VPOS15,<sp/>vPos15)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><ref refid="can_interface_8c_1a92f97880f19c821ca76067998268fae5" kindref="member">CANIF_PROT_VOLT_LIMIT_TRIP</ref>(PROT_CTRL_LIMIT_VNEG15,<sp/>vNeg15)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><ref refid="can_interface_8c_1a92f97880f19c821ca76067998268fae5" kindref="member">CANIF_PROT_VOLT_LIMIT_TRIP</ref>(PROT_CTRL_LIMIT_VPOS5,<sp/><sp/>vPos5)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><ref refid="can_interface_8c_1a92f97880f19c821ca76067998268fae5" kindref="member">CANIF_PROT_VOLT_LIMIT_TRIP</ref>(PROT_CTRL_LIMIT_VPOS3,<sp/><sp/>vPos3)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(XXX_TEMP_FLASH_CLAWBACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getModDc1_SwitchingFrequency(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.ModDc1_SwitchingFrequency.fSwRequest<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>myround(MOD_getDcFSwRequest(0U));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.ModDc1_SwitchingFrequency.acHalfPeriodTrack<sp/><sp/>=<sp/>MOD_getDcAcHalfPeriodTrack(0U);</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setModDc1_SwitchingFrequency(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>MOD_setDcFSwRequest(0U,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.ModDc1_SwitchingFrequency.fSwRequest);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>MOD_setDcAcHalfPeriodTrack(0U,<sp/>ParameterQuery.ModDc1_SwitchingFrequency.acHalfPeriodTrack);</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getModDc1_SpreadSpectrum(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.ModDc1_SpreadSpectrum.spreadSpectEnable<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MOD_getDcSpreadSpectEnable(0U);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.ModDc1_SpreadSpectrum.standardDeviation<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>myround(MOD_getDcSpreadSpectCoeff(0U)<sp/>*<sp/>10.0f);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.ModDc1_SpreadSpectrum.spectrumAdjustTau<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>myround(MOD_getDcSpreadSpectTau(0U)<sp/>*<sp/>100.0e3f);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setModDc1_SpreadSpectrum(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>MOD_setDcSpreadSpectEnable(0U,<sp/>ParameterQuery.ModDc1_SpreadSpectrum.spreadSpectEnable);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>MOD_setDcSpreadSpectCoeff(0U,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.ModDc1_SpreadSpectrum.standardDeviation<sp/>*<sp/>0.1f);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>MOD_setDcSpreadSpectTau(0U,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.ModDc1_SpreadSpectrum.spectrumAdjustTau<sp/>*<sp/>0.01e-3f);</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getModDc1_ModulationConstraints(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.ModDc1_ModulationConstraints.dutyLimit<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>myround(MOD_getDcDutyLimit(0U)<sp/>*<sp/>500.0f);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.ModDc1_ModulationConstraints.minPulseTime<sp/><sp/><sp/><sp/>=<sp/>myround(MOD_getDcTPulseMin(0U)<sp/>*<sp/>1000.0e6f);</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setModDc1_ModulationConstraints(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>MOD_setDcDutyLimit(0U,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.ModDc1_ModulationConstraints.dutyLimit<sp/>*<sp/>2e-3f);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>MOD_setDcTPulseMin(0U,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.ModDc1_ModulationConstraints.minPulseTime<sp/>*<sp/>0.001e-6f);</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a099ba9a26750952c8cdea5e8523634bb" kindref="member">setSimAcNetworkPhaseSourceU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(1,<sp/>SIM_AC_NET_PHASE_PHI_ABS,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseSourceU.phiAbs<sp/>*<sp/>0.01f);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(1,<sp/>SIM_AC_NET_PHASE_XVS,<sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseSourceU.voltMag<sp/>*<sp/>0.01f);</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a5e219ca5ed6b5dd5292eee721c6aff01" kindref="member">getSimAcNetworkPhaseSourceU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseSourceU.phiAbs<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(1,<sp/>SIM_AC_NET_PHASE_PHI_ABS)<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseSourceU.voltMag<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(1,<sp/>SIM_AC_NET_PHASE_XVS)<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1ac327c73a34d31a6cf229c924462f641b" kindref="member">setSimAcNetworkPhaseSourceV</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(2,<sp/>SIM_AC_NET_PHASE_PHI_ABS,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseSourceV.phiAbs<sp/>*<sp/>0.01f);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(2,<sp/>SIM_AC_NET_PHASE_XVS,<sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseSourceV.voltMag<sp/>*<sp/>0.01f);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a4e504c8df14077f58812b255a182041e" kindref="member">getSimAcNetworkPhaseSourceV</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseSourceV.phiAbs<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(2,<sp/>SIM_AC_NET_PHASE_PHI_ABS)<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseSourceV.voltMag<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(2,<sp/>SIM_AC_NET_PHASE_XVS)<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1ae767960b9dae7d642d15b8926695b75e" kindref="member">setSimAcNetworkPhaseSourceW</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(3,<sp/>SIM_AC_NET_PHASE_PHI_ABS,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseSourceW.phiAbs<sp/>*<sp/>0.01f);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(3,<sp/>SIM_AC_NET_PHASE_XVS,<sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseSourceW.voltMag<sp/>*<sp/>0.01f);</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a9debf93b30de3af0309b1fd6af095860" kindref="member">getSimAcNetworkPhaseSourceW</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseSourceW.phiAbs<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(3,<sp/>SIM_AC_NET_PHASE_PHI_ABS)<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseSourceW.voltMag<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(3,<sp/>SIM_AC_NET_PHASE_XVS)<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a9ace797ae2b711673c82fb4d90ae7717" kindref="member">setSimAcNetworkPhaseLoadU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(1,<sp/>SIM_AC_NET_PHASE_XRL,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseLoadU.loadR<sp/>*<sp/>0.1f);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(1,<sp/>SIM_AC_NET_PHASE_XLX,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseLoadU.loadL<sp/>*<sp/>0.1e-6f);</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a9deab59ec06f1110d9cf09aaeec93459" kindref="member">getSimAcNetworkPhaseLoadU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseLoadU.loadR<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(1,<sp/>SIM_AC_NET_PHASE_XRL)<sp/>*<sp/>10.0f);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseLoadU.loadL<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(1,<sp/>SIM_AC_NET_PHASE_XLX)<sp/>*<sp/>10.0e6f);</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1ac920ca45c9d3f12ffcf94765f7f32c15" kindref="member">setSimAcNetworkPhaseLoadV</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(2,<sp/>SIM_AC_NET_PHASE_XRL,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseLoadV.loadR<sp/>*<sp/>0.1f);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(2,<sp/>SIM_AC_NET_PHASE_XLX,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseLoadV.loadL<sp/>*<sp/>0.1e-6f);</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1aa113f33ce427d100a61c6fb97148ba57" kindref="member">getSimAcNetworkPhaseLoadV</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseLoadV.loadR<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(2,<sp/>SIM_AC_NET_PHASE_XRL)<sp/>*<sp/>10.0f);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseLoadV.loadL<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(2,<sp/>SIM_AC_NET_PHASE_XLX)<sp/>*<sp/>10.0e6f);</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1adde16125808d042f784f6534bffdc150" kindref="member">setSimAcNetworkPhaseLoadW</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(3,<sp/>SIM_AC_NET_PHASE_XRL,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseLoadW.loadR<sp/>*<sp/>0.1f);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>SIM_setAcNetworkPhaseElement(3,<sp/>SIM_AC_NET_PHASE_XLX,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.SimAcNetworkPhaseLoadW.loadL<sp/>*<sp/>0.1e-6f);</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1addccb6e61bf93cf24b3eb31c1e54e2f3" kindref="member">getSimAcNetworkPhaseLoadW</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseLoadW.loadR<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(3,<sp/>SIM_AC_NET_PHASE_XRL)<sp/>*<sp/>10.0f);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SimAcNetworkPhaseLoadW.loadL<sp/>=<sp/>myround(SIM_getAcNetworkPhaseElement(3,<sp/>SIM_AC_NET_PHASE_XLX)<sp/>*<sp/>10.0e6f);</highlight></codeline>
<codeline lineno="640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1ad4603bcb31061e237822bf91bb33ca3f" kindref="member">getPpcAplCoeffsQSG</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>qsgKd;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>qsgKq;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>qsgTz;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>APL_getCommonConfigCoeffsQSG(&amp;qsgKd,<sp/>&amp;qsgKq,<sp/>&amp;qsgTz);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplCoeffsQSG.Kd<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(qsgKd<sp/>*<sp/>1000.0f);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplCoeffsQSG.Kq<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(qsgKq<sp/>*<sp/>1000.0f);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplCoeffsQSG.Tz<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(qsgTz<sp/>*<sp/>1000.0e3f);</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a8b1ade2f290e5dfc06473c88d4760789" kindref="member">setPpcAplCoeffsQSG</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>APL_setCommonConfigCoeffsQSG((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PpcAplCoeffsQSG.Kd<sp/>*<sp/>0.001f,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PpcAplCoeffsQSG.Kq<sp/>*<sp/>0.001f,</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PpcAplCoeffsQSG.Tz<sp/>*<sp/>0.001e-3f);</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a12a740156e0379be387ac042ce47c60f" kindref="member">getPpcAplCoeffsLFL</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>lfKp;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>lfTi;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>APL_getCommonConfigCoeffsLF(&amp;lfKp,<sp/>&amp;lfTi);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplCoeffsLFL.Kp<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(lfKp<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplCoeffsLFL.Ti<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(lfTi<sp/>*<sp/>10.0e3f);</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a7cc2a42cf68267f853b14a7425f842b8" kindref="member">setPpcAplCoeffsLFL</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)APL_setCommonConfigCoeffsLF((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PpcAplCoeffsLFL.Kp<sp/>*<sp/>0.01f,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.PpcAplCoeffsLFL.Ti<sp/>*<sp/>0.1e-3f);</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a28313b828d65d67bc6f8af5ab033c31a" kindref="member">getPpcAplLimitsLFL</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>kMax;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>kMin;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>APL_getCommonConfigLimitsLF(&amp;kMax,<sp/>&amp;kMin);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplLimitsLFL.fMax<sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(kMax<sp/>*<sp/>10.0f);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplLimitsLFL.fMin<sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(kMin<sp/>*<sp/>10.0f);</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a9ac2023f7aa37aa1a6cd2b8f48877fdf" kindref="member">setPpcAplLimitsLFL</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)APL_setCommonConfigLimitsLF((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PpcAplLimitsLFL.fMax<sp/>*<sp/>0.1f,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.PpcAplLimitsLFL.fMin<sp/>*<sp/>0.1f);</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a0815f3e91cb4134a9fee2b4543a19f7a" kindref="member">getPpcAplLockDetect</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>minVolt;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>indThreshold;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>tau;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>APL_getCommonConfigLockDetect(&amp;minVolt,<sp/>&amp;indThreshold,<sp/>&amp;tau);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplLockDetect.minVolt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(minVolt);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplLockDetect.indThreshold<sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(indThreshold<sp/><sp/><sp/><sp/>*<sp/>200.0f);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplLockDetect.tau<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(tau<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>200.0f);</highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a1fb2707449888c61ecaed639a1d0eebb" kindref="member">setPpcAplLockDetect</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>APL_setCommonConfigLockDetect((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PpcAplLockDetect.minVolt,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PpcAplLockDetect.indThreshold<sp/>*<sp/>5.0e-3f,</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PpcAplLockDetect.tau<sp/>*<sp/>5.0e-3f);</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1aa68e0bf5034385046a8a968e1813f769" kindref="member">getPpcAplMeasAdjust</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>argAdjust;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>magAdjust;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)APL_getCommonConfigMeasAdjust(&amp;argAdjust,<sp/>&amp;magAdjust);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplMeasAdjust.argAdjust<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(argAdjust<sp/>*<sp/>1.0e2f);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PpcAplMeasAdjust.magAdjust<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int16_t)myround(magAdjust<sp/>*<sp/>1.0e3f);</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1ad562ed2adbbf0401efa0aa76ff7899f9" kindref="member">setPpcAplMeasAdjust</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)APL_setCommonConfigMeasAdjust((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PpcAplMeasAdjust.argAdjust<sp/>*<sp/>1.0e-2f,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)ParameterQuery.PpcAplMeasAdjust.magAdjust<sp/>*<sp/>1.0e-3f);</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a187612318fec45f237793a46ca358d0d" kindref="member">setPccMeasurementConfig</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>PCC_ConfigDataI.ac.voltageSource[CMM_AC_NETWORK_LOCAL]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(PCC_AcVoltageSource_t)ParameterQuery.PccMeasurementConfig.acVoltageSourceLocal;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>PCC_ConfigDataI.ac.voltageSource[CMM_AC_NETWORK_REMOTE]<sp/><sp/><sp/><sp/><sp/>=<sp/>(PCC_AcVoltageSource_t)ParameterQuery.PccMeasurementConfig.acVoltageSourceRemote;</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1aa559c7f5ca69d7f356f4de0c3d8dc79c" kindref="member">getPccMeasurementConfig</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PccMeasurementConfig.acVoltageSourceLocal<sp/><sp/><sp/><sp/>=<sp/>PCC_ConfigDataI.ac.voltageSource[CMM_AC_NETWORK_LOCAL];</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PccMeasurementConfig.acVoltageSourceRemote<sp/><sp/><sp/>=<sp/>PCC_ConfigDataI.ac.voltageSource[CMM_AC_NETWORK_REMOTE];</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a6a4fe470125884df9881615e979428f2" kindref="member">setPccArCoeffsVdc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>PCC_setArVoltageControlGains((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PccArCoeffsVdc.Kp<sp/>*<sp/>0.01f,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PccArCoeffsVdc.Ti<sp/>*<sp/>0.1e-3f,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)ParameterQuery.PccArCoeffsVdc.Tb<sp/>*<sp/>0.1f);</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a3fecead1b5d660a67d52e7c54c4031aa" kindref="member">getPccArCoeffsVdc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Kp;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Ti;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Tb;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>PCC_getArVoltageControlGains(&amp;Kp,<sp/>&amp;Ti,<sp/>&amp;Tb);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PccArCoeffsVdc.Kp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(Kp<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PccArCoeffsVdc.Ti<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(Ti<sp/>*<sp/>10.0e3f);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.PccArCoeffsVdc.Tb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(uint16_t)myround(Tb<sp/>*<sp/>10.0f);</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/>read-only<sp/>parameters</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a500d058a67c7698a0ea10b1be8e83406" kindref="member">getStatusFaults</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.LossValidControlMessage<sp/>=<sp/>faultStat.flags.LossOfValidCmd;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.EStopShutdown<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.EStopShutdown;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.IllegalTransition<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.IllegalTransition;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.InvalidEEHeader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.InvalidEEHeader;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.InvalidEESection<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.InvalidEESection;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.OverloadAC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.TimedACOverload;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.OverloadDC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.TimedDCOverload;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.TimedACOvervoltage<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.TimedACOvervoltage;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.TimedCirculatingCurrent<sp/>=<sp/>faultStat.flags.TimedICircOverload;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.CoolingSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.CoolingSystemFail;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.FilterOvertemp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdFaultActive(FLT_CFG_THERMAL_OVERLOAD);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.CtlBrdVoltage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.CtlBdVoltage;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.dIdt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.Didt;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.PowerChannelImbalance<sp/><sp/><sp/>=<sp/>faultStat.flags.PwrChanImbalance;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.OvercurrentAC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.ACOvercurrent;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.OvertempPowerDevice<sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.IGBTOvertemp;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.InletOvertemperature<sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.InverterOvertemp;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.GeneralFault<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>FAULT_ACTIVE();</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.FanCircuit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdFaultActive(FLT_CFG_FAN_CIRCUIT);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.OvercurrentDC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.DCOvercurrent;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.OvervoltageDC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.DCOvervoltage;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.UndervoltageDC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.DCUndervoltage;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.LowCoolingFlow<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.LowCoolingFlow;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults.PORTimeout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.PORTimeout;</highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a8ba89c16ba44ad7e14981c135c2bd8e5" kindref="member">getStatusFaults2</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.Condensation<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdFaultActive(FLT_CFG_CONDENSATION);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.ExternalInhibit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdFaultActive(FLT_CFG_EXT_INHIBIT);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.I2C<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdFaultActive(FLT_CFG_I2C);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.GroundFault<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdFaultActive(FLT_CFG_GROUND);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.Fuse<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdFaultActive(FLT_CFG_FUSE);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.ACDisconnect<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdFaultActive(FLT_CFG_DISCONNECT);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.BaseplateOvertemperature<sp/>=<sp/>faultStat.flags.BaseplateOvertemp;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.InternalOvertemperature<sp/>=<sp/>faultStat.flags.InternalOvertemp;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.BaseplateUndertemp<sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.BaseplateUndertemp;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.IGBTUndertemp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.IgbtUndertemp;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.InternalUndertemp<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.InternalUndertemp;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.InletUndertemp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.InletUndertemp;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.DcImbalance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.DcImbalance;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusFaults2.DcSlewRate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.DcSlewRate;</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1ac7554b3bedeba6e81305b3d36a971bf7" kindref="member">getStatusSystemFaults</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//system<sp/>faults</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.PWMISR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.overrunPwmIsr;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.Overrun200us<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.overrun100us;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.Overrun1ms<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.overrun1ms;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.Overrun10ms<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.overrun10ms;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.Overrun100ms<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.overrun100ms;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.Overrun1s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.overrun1s;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.Stack<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.StackOverflow;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.ControlHw<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.ControlHardwareFail;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.EEUninitialized<sp/><sp/><sp/>=<sp/>faultStat.flags.EEUninitialized;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.Software<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.softwareError;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.SPI<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.spi;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.EeTimeout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.eeTimeout;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusSystemFaults.Watchdog<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultStat.flags.watchdog;</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a168a8209def14070d92016774b72ef81" kindref="member">getStatusWarnings</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.CANWarning<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>warningStat.flags.CANWarning;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.CANErrorPassive<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>warningStat.flags.CANErrorPassive;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.FilterOvertemp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdWarningActive(FLT_CFG_THERMAL_OVERLOAD);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.FanCircuit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdWarningActive(FLT_CFG_FAN_CIRCUIT);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.eeSaveInProgress<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>eeHandlerGetSaveInProgress();</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.localNetworkMismatch<sp/><sp/>=<sp/>warningStat.flags.localNetworkMismatch;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.remoteNetworkMismatch<sp/>=<sp/>warningStat.flags.remoteNetworkMismatch;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.Condensation<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdWarningActive(FLT_CFG_CONDENSATION);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.ExternalInhibit<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdWarningActive(FLT_CFG_EXT_INHIBIT);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.I2C<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdWarningActive(FLT_CFG_I2C);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.MaintenanceRequired<sp/><sp/><sp/>=<sp/>warningStat.flags.maintenanceRequired;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.GroundFault<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdWarningActive(FLT_CFG_GROUND);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.Fuse<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdWarningActive(FLT_CFG_FUSE);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.StatusWarnings.ACDisconnect<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>faultHandlerIsCfgdWarningActive(FLT_CFG_DISCONNECT);</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a35d14aae8a00de33809c34ea29020951" kindref="member">getDataloggerStatus</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.DataloggerStatus.DataloggerRecording<sp/>=<sp/>dataLogger_isLogging();</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.DataloggerStatus.DataloggerConfigurationIsValid<sp/>=<sp/>dataLogger_configurationIsValid();</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a9dc159926a02f9570bf4c8934c379bc6" kindref="member">getBuildTime</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.BuildTime.BuildTime<sp/>=<sp/><ref refid="revision_info_8h_1ab9ed5a8f84d18e992b3dea2befec4655" kindref="member">buildInfo</ref>.<ref refid="struct_build_info_1a485771dfeb15f4135f11cbfb1a665a44" kindref="member">formattedIntegerTime</ref>;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a780c49310495e78fa502391f5299a87b" kindref="member">getSoftwareHash</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SoftwareHash.SoftwareHash<sp/>=<sp/><ref refid="revision_info_8h_1ab9ed5a8f84d18e992b3dea2befec4655" kindref="member">buildInfo</ref>.<ref refid="struct_build_info_1a7df441e6e9ea49c34e6c739e4f4693ad" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a84a0f351f2186ce06a6e3a7d1d13ad32" kindref="member">getLoggerStatus01</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.LoggerStatus01.ReadableOctets<sp/>=<sp/>dataLogger_readableOctets();</highlight></codeline>
<codeline lineno="857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a1c41607124c2a3edfba4aca78b93e253" kindref="member">canInterfaceInit</ref>(</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>canID,</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SA_mask,</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_BAUDRATE<sp/>baud,</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>buildTime,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>buildGitRev</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.BuildTime.BuildTime<sp/>=<sp/>buildTime;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterQuery.SoftwareHash.SoftwareHash<sp/>=<sp/>buildGitRev;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>LENGTHOF(rxList);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxList[i].msg.j1939<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>LENGTHOF(txList);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txList[i].msg.j1939<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>CANH_init(canID,<sp/>SA_mask,<sp/>baud,<sp/>rxList,<sp/>txList,<sp/>LENGTHOF(rxList),<sp/>LENGTHOF(txList));</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>schedulerAddTask(&amp;canInterfaceUpdateTx_1ms,<sp/>SCH_TASK_GROUP_1MS);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>schedulerAddTask(&amp;canInterfaceUpdateTx_10ms,<sp/>SCH_TASK_GROUP_10MS);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>schedulerAddTask(&amp;canInterfaceUpdateTx_100ms,<sp/>SCH_TASK_GROUP_100MS);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>canInterfaceInitTxRates();</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>canSetCallbackWhenInvalid(&amp;rxList[rxMsg_ParameterQuery],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//always<sp/>respond<sp/>to<sp/>parameter<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>SYS_setCanTimeout(<ref refid="application_8c_1aad4f26eabbeb37bd61a3bb2c76195043" kindref="member">j1939Interface</ref>.<ref refid="struct_j1939___i_n_t_e_r_f_a_c_e_1aea384cfa02b15a089bff4254fd5cc2df" kindref="member">timeout</ref>);</highlight></codeline>
<codeline lineno="890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>canScale(</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>ssf<sp/></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>*<sp/>pow(10,<sp/>-ssf);</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sunspec.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a39a21ea844fd21be0c1ac875ba3231d1" kindref="member">canInterface_itemNetMultiplier</ref>(<ref refid="struct_interface_item_common" kindref="compound">InterfaceItemCommon</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>canScale(item-&gt;<ref refid="struct_interface_item_common_1a53c4a11e0a7621d69cfcaec3dc221463" kindref="member">canScaleFactor</ref>,<sp/>-item-&gt;<ref refid="struct_interface_item_common_1a0d2e5de29b3efe5a2acee7258c9c8e55" kindref="member">internalScaleFactor</ref>);</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a6aadaf337d1caee0a760aa9ae127360d" kindref="member">items_getMeta</ref>(Meta_Enum<sp/>meta_index,<sp/><ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>items,<sp/>uint16_t<sp/>items_count)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_NOT_NULL(items);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>items_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_NOT_NULL(items[i]);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="struct_interface_item_common" kindref="compound">InterfaceItemCommon</ref><sp/>*)<sp/>items[i])-&gt;can.getter((<ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref><sp/>*)<sp/>items[i],<sp/>meta_index);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1ad509994a37bdba87b40e6407e5523b20" kindref="member">items_setMeta</ref>(Meta_Enum<sp/>meta_index,<sp/><ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>items,<sp/>uint16_t<sp/>items_count)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>UNUSED_ARG(meta_index);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>items_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="struct_interface_item_common" kindref="compound">InterfaceItemCommon</ref><sp/>*)<sp/>items[i])-&gt;can.setter((<ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref><sp/>*)<sp/>items[i],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>meta_index);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a00ca1b7737ba8d9bf03aa228a2186171" kindref="member">table_items_getMeta</ref>(Meta_Enum<sp/>meta_index,<sp/><ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>items,<sp/>uint16_t<sp/>items_count)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>items_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>(<ref refid="struct_interface_item_common" kindref="compound">InterfaceItemCommon</ref><sp/>**)<sp/>items[i])-&gt;can.getter((<ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref><sp/>*)<sp/>items[i],<sp/>meta_index);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_interface_8c_1a176414fba733ccb522284cdd7fbe31ce" kindref="member">table_items_setMeta</ref>(Meta_Enum<sp/>meta_index,<sp/><ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>items,<sp/>uint16_t<sp/>items_count)<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>UNUSED_ARG(meta_index);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>items_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>(<ref refid="struct_interface_item_common" kindref="compound">InterfaceItemCommon</ref><sp/>**)<sp/>items[i])-&gt;can.setter((<ref refid="interface_8h_1a2d58cf9316da363273ac00d4455ab5f7" kindref="member">InterfaceItem_void</ref><sp/>*)<sp/>items[i],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>meta_index);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/RileyTurner/Desktop/gridtied copy/interface/canInterface.c"/>
  </compounddef>
</doxygen>
